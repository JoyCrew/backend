# Workflow name
name: Java Spring Boot CD

# This workflow runs on pushes to the 'main' branch.
on:
  push:
    branches:
      - main

jobs:
  deploy:
    # The type of runner that the job will run on.
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checks out the repository code.
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Sets up JDK 17 for building the project.
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # Step 3: Builds the executable JAR file using the 'prod' profile.
      - name: Build JAR for Production
        run: |
          chmod +x gradlew
          ./gradlew clean assemble -Pspring.profiles.active=prod

      # Step 4: Finds the path to the generated JAR file.
      - name: Locate and Prepare JAR artifact
        id: get_jar_path
        run: |
          JAR_FILE=$(find build/libs -name "*.jar" | head -n 1)
          if [ -z "$JAR_FILE" ]; then
            echo "Error: No executable JAR file found!"
            exit 1
          fi
          echo "jar_path=$JAR_FILE" >> $GITHUB_OUTPUT

      # Step 5: Adds the EC2 server's host key to the runner's known_hosts file.
      # This prevents interactive prompts during SSH/SCP connections.
      - name: Add EC2 Host Key to known_hosts
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_HOST_KEYS }}" > ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      # Step 6: Securely copies the JAR file from the GitHub runner to the EC2 server.
      - name: Transfer JAR to EC2 Server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: ${{ steps.get_jar_path.outputs.jar_path }}
          target: ~/app/build/libs/
          strip_components: 2

      # Step 7: Connects to the EC2 server via SSH and executes deployment commands.
      - name: Deploy and Restart Application on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -eux # Exit on error, print commands

            echo "Stopping existing JoyCrew backend service..."
            sudo systemctl stop joycrew-backend || true

            DEPLOY_DIR="/home/${{ secrets.SSH_USER }}/app/build/libs"
            JAR_NAME=$(basename "${{ steps.get_jar_path.outputs.jar_path }}")
            sudo chmod +x "$DEPLOY_DIR/$JAR_NAME"

            echo "Starting JoyCrew backend service..."
            sudo systemctl start joycrew-backend

            echo "Checking service status..."
            sudo systemctl status joycrew-backend --no-pager || true