# Workflow name
name: JoyCrew Backend CI/CD

# Triggers the workflow on pushes to the develop and main branches
on:
  push:
    branches:
      - develop
      - main

# Environment variables available to all jobs
env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: joycrew-backend
  EKS_CLUSTER_NAME: joycrew-cluster

jobs:
  # ===================================================================
  # CI Job: Runs on pushes to 'develop' to build and test the code.
  # ===================================================================
  build-and-test:
    name: Build and Test
    # Only run this job for the 'develop' branch
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build and run tests with Gradle
        run: ./gradlew build

  # ===================================================================
  # CD Job: Runs on pushes to 'main' to build a Docker image and deploy to EKS.
  # ===================================================================
  deploy:
    name: Build, Push, and Deploy
    # Only run this job for the 'main' branch
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    # These permissions are needed to interact with GitHub's OIDC Token endpoint.
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          # Use an IAM role for authentication instead of long-lived access keys
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build the Docker image for the amd64 architecture (for EKS nodes)
          docker buildx build --platform linux/amd64 -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --push .
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Configure kubectl for EKS
        run: |
          aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

      - name: Deploy to Amazon EKS
        run: |
          # Update the Kubernetes deployment with the new image version
          kubectl set image deployment/joycrew-backend-deployment backend-container=${{ steps.build-image.outputs.image }}